Assignment
************


Welcome to the preliminary assignment for MiniTorch assignment. This
assignment is focused on introducing the core technologies behind the
library and to introduce the testing, dataset and visualization
frameworks that we will use throughout the course. Additionally we
will start building up some of the infrastructure for MiniTorch itself.


Before beginning this assignment be sure to read Module 0, in particular :doc:`setup`
and :doc:`contributing` which will help you get started.

=============================
Task 0.1: Operators
=============================

Implement a series of basic mathematical functions in Python.  Each of
these functions is quite simple, but we they will form the basis for
the the library. Be sure you are familar with each of the functions as
some might be new.

.. note::

   For now you can ignore the @jit symbol at the top of functions,
   it is a `no-op`. We will come back to its role in Module 3.


.. todo:: 
   Complete the following functions in `minitorch/operators.py` and pass tests marked as `task0_1`.
  
.. autofunction:: minitorch.operators.mul
.. autofunction:: minitorch.operators.id
.. autofunction:: minitorch.operators.neg
.. autofunction:: minitorch.operators.add
.. autofunction:: minitorch.operators.lt
.. autofunction:: minitorch.operators.sigmoid
.. autofunction:: minitorch.operators.relu
.. autofunction:: minitorch.operators.relu_back


===============================
Task 0.2: Testing and Debugging
===============================

.. note:: This task requires familiarity with testing and property
   tests. Be sure to first carefully read the section on
   :doc:`property_testing` and the `Hypothesis
   <https://hypothesis.readthedocs.io/>`_ documentation.


Implement a set of tests for your operators. These tests will ensure
that you functions not only work, but obey high-level mathematical
properties for  any input. 




.. todo::
   Complete the following functions in `tests/test_operators.py` and pass tests marked as `task0_2`.

.. autofunction:: minitorch_tests.test_symmetric
.. autofunction:: minitorch_tests.test_distribute
.. autofunction:: minitorch_tests.test_other
                  

  
============================
Task 0.3: Functional Python
============================


.. note::
   
   This task requires familiarity with basic functional programming concepts and notation.
   This `Tutorial <https://www.hackerearth.com/practice/python/functional-programming/functional-programming-1/tutorial/>`_ is a good starting place.

.. |tutorial|


To practice the use of higher-order functions in Python, implement three basic
functional concepts. Use these in combination with the operators described in Task 0.1
to build up more complex mathematical operations that work on lists instead of single values.



.. todo::
   Complete the following functions in `minitorch/operators.py` and pass tests marked as `tasks0_3`
  
.. autofunction:: minitorch.operators.map
.. autofunction:: minitorch.operators.negList
.. autofunction:: minitorch.operators.zipWith
.. autofunction:: minitorch.operators.addLists
.. autofunction:: minitorch.operators.reduce
.. autofunction:: minitorch.operators.sum
.. autofunction:: minitorch.operators.prod

                  

=====================
Task 0.4: Modules
=====================

.. note:: This task requires familiarity with modules.
          Please read :doc:`modules` to get started.
          If you want more context for how modules  are used
          you may find it helpful to skip ahead and read the `torch module
          tutorial <https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#sphx-glr-beginner-blitz-cifar10-tutorial-py>`_.  



This task is to implement the core structure of the :class:`Module`
class.  You will implement a tree-data structure that
stores named `Parameters` on each node. This  datastructures  makes it
easy for users to create trees that can be `walked` to find all of the parameters of
interest.


.. todo::
   Complete the functions in `minitorch/module.py` and pass tests marked as `tasks0_4`.


.. autofunction:: minitorch.Module.train
.. autofunction:: minitorch.Module.eval
.. autofunction:: minitorch.Module.named_parameters
                  

=====================
Task 0.5: Visualization
=====================

.. note::
   
   This task requires familiarity with visualization tools described in :doc:`visualization`.

For the first few assignments we will be using a set of datasets
that are implemented in `project/datasets.py`. Read through the code
in `project/run_torch.py` to see an implementation of a model for this
code in Torch.

.. todo::
   Start a visdom server. Make sure you are able to run this code and observe the
   progress of the model with the Visdom setup.

>>> python project/run_torch.py

* Save the loss graph of this model and the final image it generates
  and commit them to your repo. Add the images to the README before
  checking in.


