=============
Contributing
=============


Each MiniTorch assignment is structured to mimic the experience of
contributing to a real open-source project. As such we will require
specific contributer requirements. This doc lays out the expectations
of your code. For each assignment, there will be a script `run_test.py`
that will check each of the necessary properties before submitting.

>>> python run_tests.py

You can also run individual test groups.

>>> python run_tests.py 2


Style
------

It is a requirement of these assignments to keep your code organized
and clean to make it easier to debug, optimize, and document. To help
with this process, we will utilize required formatting on all the
assignments. Style checked in `run_tests.py 0` automatically.

Fixing style bugs can be an annoying process. However there is a nice trick
to fix most formatting issues automatically. We use `black` to automatically reformat
all of your code to fit most of the requirements. (See https://github.com/psf/black for
more details).

>>> black minitorch/ tests/ project/


We also recommend setting up your editor or IDE to highlight other style issues. Many of them
 will do it automatically or ask for recommendations. 


Testing
--------------

Each assignment will have a series of tests that are required to pass.
These tests are in the `tests/` directory and are in the `pytest` format
(https://docs.pytest.org/en/stable/). Any function in that directory
with the word `test` in its name will be run as part of the test
suite.

In addition to `run_tests.py` which runs all of the tests, you can run
tests in a single file with:

>>> python -m pytest tests/test_operators.py

Or even a particular test with.

>>> python -m pytest tests/test_operators.py -k test_sum

Pytest will hide all print statements unless a test fails. 

 
Documentation
--------------

Throughout the codebase we will document all functions in a
standardized style. Documentation is critical for our Python codebase, and
we use it to convey the requirements on many functions.
Functions should have docstrings of the following form (known as Google docstyle) ::


  def index(ls, i):
      """
      List indexing.
      
      Args:
          ls (list): A list of any type.
          i (int): An index into the list

      Returns:
          Value at ls[i].
      """
      ... 


The full description of this docstyle is given here
https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html.



Continuous Integration (CI)
-----------------------------

In addition to local testing, the project is setup such that on each code push,
the tests are automatically run and checked on the server. You will be able to see
how well you are doing on the assignment by commiting your code, pushing to the server,
and then logging in to github. This process takes several minutes, but it is an easy way to
keep track of your progress as you go.


>>> git commit -am "First commit"; git push origin master

Then go to github and click on "Pull Requests". Clicking on the
request itself will give a link to see the current progress of your
work.
