# + slideshow={"slide_type": "skip"}

import minitorch

# + [markdown] slideshow={"slide_type": "slide"}
# Module 2.1 - Tensors
# =============================================

# + [markdown] slideshow={"slide_type": "slide"}
# Starting Point
# --------------------------

# .. image:: figs/Graphs/splitfail.png
#            :align: center
#            :width: 300px

# + [markdown] slideshow={"slide_type": "slide"}
# Final Layer
# --------------
# .. image:: figs/Graphs/split1.png
#            :align: center
#            :width: 200px

# .. image:: figs/Graphs/split2.png
#            :align: center
#            :width: 200px


# .. image:: figs/Graphs/mlpmid.png
#            :align: center
#            :width: 300px

# + [markdown] slideshow={"slide_type": "slide"}
# Final Layer
# --------------

# .. image:: figs/Graphs/mlpmid.png
#            :align: center
#            :width: 300px

# + [markdown] slideshow={"slide_type": "slide"}
# Math View (Alt)
# ---------------

#  $$
#    \begin{eqnarray*}
#    \text{lin}(x; w, b) &=& x_1 \times w_1 + x_2 \times w_2 + b \\
#    h_ 1 &=& \text{ReLU}(\text{lin}(x; w^0, b^0)) \\
#    h_ 2 &=& \text{ReLU}(\text{lin}(x; w^1, b^1))\\
#    m(x_1, x_2) &=& \text{lin}(h; w, b)
#    \end{eqnarray*}
# $$

# Parameters:
#  $w_1, w_2, w^0_1, w^0_2, w^1_1, w^1_2, b, b^0, b^1$

    
# + [markdown] slideshow={"slide_type": "slide"}
# Quiz
# -------
    
# + [markdown] slideshow={"slide_type": "slide"}
# Outline
# --------
# * Tensors
# * Views
# * Strides

# + [markdown] slideshow={"slide_type": "slide"}
# Tensors
# ================

# + [markdown] slideshow={"slide_type": "slide"}
# Tensors?
# --------
# What is it?
# * Fancy multi-dimensional arrays
# * Embedded mathmatical programming language

# + [markdown] slideshow={"slide_type": "slide"}
# Tensors!
# ----------
# Key Building Block
# * Matlab
# * Numpy
# * Tensorflow, etc.

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * 0-Dimensional Scalar

# * Our standby for Module-0


# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * 1-Dimensional -  Vector

# .. image:: figs/Tensors/vector.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * 2-Dimensional - Matrix

# .. image:: figs/Tensors/matrix.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * Arbitrary dimensions - Tensor (Array in numpy)

# .. image:: figs/Tensors/tensor.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * Dims - # dimensions (`tensor.dims`)
# * Shape -  # cells per dimension (`tensor.shape`)
#  * Size - # cells (`tensor.size`)

# + [markdown] slideshow={"slide_type": "slide"}
# Example
# ------------

# * dims: 2
# * shape: (2, 5)
# * size : 10

# .. image:: figs/Tensors/matrix.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Example
# ------------

# * dims: ?
# * shape: ?
# * size : ?

# .. image:: figs/Tensors/matrix.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Indexing
# ------------

# * Indexing syntax: `tensor[0, 1, 2]`

# .. image:: figs/Tensors/tensor2.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Convention!
# ----------------

# In this class

# * depth
# * row
# * columns


# + [markdown] slideshow={"slide_type": "slide"}
# Shape Maniputation
# ------------------

# * Permutation

# .. image:: figs/Tensors/matrix1.png
# .. image:: figs/Tensors/matrix2.png


# + [markdown] slideshow={"slide_type": "slide"}
# Shape Maniputation
# ---------------------

# * Views

# .. image:: figs/Tensors/matrix2.png
# .. image:: figs/Tensors/broad.png

# + [markdown] slideshow={"slide_type": "slide"}
# What's Bad?
# ------------

# * Hard to grow or shrink
# * Only numerical values
# * Lose comprehensions / python built-ins
# * Shapes are easy to mess up





# + [markdown] slideshow={"slide_type": "slide"}
# Request
# ---------

#    * No autodifferentiation for now
#    * Only consider standard tensor operations
#    * Add autodiff afterwards

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * 2-Dimensional - Matrix

# .. image:: figs/Tensors/matrix.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * Arbitrary dimensions - Tensor

# .. image:: figs/Tensors/tensor.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Terminology
# ------------

# * Dims - # dimensions (`tensor.dims`)
# * Shape -  # cells per dimension (`tensor.shape`)
# * Size - # cells (`tensor.size`)

# + [markdown] slideshow={"slide_type": "slide"}
# Example
# ------------

# * dims: 2 / shape: (2, 5) /  size : 10

# .. image:: figs/Tensors/matrix.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Shape Maniputation
# ------------------

# * Permutation 

# + slideshow={"slide_type": "x"}
tensor.permute(1, 0)

# .. image:: figs/Tensors/matrix1.png
# .. image:: figs/Tensors/matrix2.png


# + [markdown] slideshow={"slide_type": "slide"}
# Shape Maniputation
# ---------------------

# * Views 

# + slideshow={"slide_type": "x"}
tensor.view(1, 5, 2)

# .. image:: figs/Tensors/matrix2.png
# .. image:: figs/Tensors/broad.png


# + [markdown] slideshow={"slide_type": "slide"}
# Views
# ================

# + [markdown] slideshow={"slide_type": "slide"}
# Goal
# -----

# * Support user api
# * Keep track of tensor properties
# * Setup fast / simple Functions

# + [markdown] slideshow={"slide_type": "slide"}
# Tensor Usage
# -------------

# Unary
# + slideshow={"slide_type": "x"}

new_tensor = tensor.log()

# Binary (for now, only same shape) 

# + slideshow={"slide_type": "x"}
new_tensor = tensor1 + tensor2

# Reductions ::

# + slideshow={"slide_type": "x"}
new_tensor = tensor.sum()


# + [markdown] slideshow={"slide_type": "slide"}
# Why not just use lists?
# ------------------------
# * Functions to manipulate shape
# * Mathematical notation
# * Can act as Variables / Parameters
# * Efficient control of memory (Module-3)

# + [markdown] slideshow={"slide_type": "slide"}    
# Why not lists?
# ---------------

# Matrix (5, 2)::

# + slideshow={"slide_type": "x"}

matrix = [[1, 2], [3, 4], [5, 7], [2, 3], [2, 4]]

# View (1, 5, 2) 

# + slideshow={"slide_type": "x"}
tensor = [[[matrix[j][i] for i in range(2)]
            for j in range(5)]]

# Transpose (2, 5) ::

# + slideshow={"slide_type": "x"}
matrix_trans = [[matrix[i][j] for i in range(5)]
                      for j in range(2)]

# + [markdown] slideshow={"slide_type": "slide"}
# Issues
# ---------------

# * Operators requires copying 

# + slideshow={"slide_type": "x"}
matrix_trans = [[matrix[i][j] for i in range(5)]
                 for j in range(2)]

# * Storage shaped based on usage ::

# + slideshow={"slide_type": "x"}
tensor = [[[matrix[i][j] for i in range(2)]
           for j in range(5)]]

# + [markdown] slideshow={"slide_type": "slide"}
# Idea 1: Views
# -----------------
# * Seperate storing information from user view
# * Keep a mapping from users version to storage

# + [markdown] slideshow={"slide_type": "slide"}
# Idea 2: Immutable Operations
# ----------------------------------------------
# * Minitorch doesn't let you update tensors
# * All operations return a "new" tensor
# * Since there are no updates, maybe point to the same storage.

# + [markdown] slideshow={"slide_type": "slide"}
# Tensor Internals
# =================

# + [markdown] slideshow={"slide_type": "slide"}
# How does this work
# --------------------

# * **Storage** :  1-D array of numbers of length `size`

# * **Strides** : tuple that provides the mapping from user `indexing`
#   to the `position` in the 1-D `storage`.

# + [markdown] slideshow={"slide_type": "slide"}
# Strides
# --------

# .. image:: figs/Tensors/stride2.png
#            :align: center
#            :width: 400px

# + [markdown] slideshow={"slide_type": "slide"}
# Strides
# --------

# .. image:: figs/Tensors/stride1.png
#            :align: center
#            :width: 400px

# + [markdown] slideshow={"slide_type": "slide"}
# Strides
# --------

# .. image:: figs/Tensors/stride3.png
#            :align: center
#            :width: 400px

# + [markdown] slideshow={"slide_type": "slide"}
# Which is best?
# ----------------

# * Can be useful when it is contiguous
# * Bigger strides left

# + [markdown] slideshow={"slide_type": "slide"}
# Strides
# --------

# .. image:: figs/Tensors/stride4.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Silly Stride Intuition
# -----------------------

# * Numerical bases, binary number


#   1101011


# Implied strides: (64, 32, 16, 8, 4, 2, 1)

# + [markdown] slideshow={"slide_type": "slide"}
# Stride Math
# ------------

# Calculating from strides  
# + slideshow={"slide_type": "x"}

s1 * index1 + s2 * index2 + s3 * index3 ...

# + [markdown] slideshow={"slide_type": "slide"}
# Key Operations
# ---------------

# * Map from index to position (binary -> decimal)
# * Map from position to index (decimal -> binary)

# + [markdown] slideshow={"slide_type": "slide"}
# Implementation
# ----------------

# * TensorData : Manager of strides and storage

# + [markdown] slideshow={"slide_type": "slide"}
# Module-2
# ==========

# + [markdown] slideshow={"slide_type": "slide"}
# Overview
# ----------

#    * `tensor.py` - Tensor Variable
#    * `tensor_functions.py` - Tensor Functions
#    * `tensor_data.py` - Storage and Indexing
#    * `tensor_ops.py` - Low-level tensor operations

# + [markdown] slideshow={"slide_type": "slide"}
# Tasks 2.1: Indexing
# -----------------------

# .. image:: figs/Tensors/tensor2.png


# + [markdown] slideshow={"slide_type": "slide"}
# Tasks 2.2: Operations
# -----------------------

# .. image:: figs/Ops/zip.png
#            :align: center


# + [markdown] slideshow={"slide_type": "slide"}
# Tasks 2.3:  Autograd
# ----------------------

# .. image:: figs/Ops/zip\ back.png
#            :align: center

# + [markdown] slideshow={"slide_type": "slide"}
# Tasks 2.4: Broadcasting
# -------------------------

# .. image:: figs/Ops/zip\ broad\ back.png

# + [markdown] slideshow={"slide_type": "slide"}
# Task 2.5: Training
# -------------------

# .. image:: complete.png

# + [markdown] slideshow={"slide_type": "slide"}
# Q&A
# -----
