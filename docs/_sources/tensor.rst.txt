==========================================
What is a Tensor?
=========================================

Tensor is a fancy name for a simple concept. A tensor is a
`multi-dimensional array` of arbitray dimensions. For now you should
think of it as a convenient way to hold data instead of python lists
or tuples. The simplest non-trivial tensor is 1-dimensional tensor
(also called a `vector`).


.. image:: vector.png

A 2-dimensional tensor is called a `matrix`

.. image:: matrix.png


In addition to dimension the other critical aspect of a tensor are its
`shape` and `size`. We say the `shape` of the matrix is (4, 3) and its size (number of squares) is 12.

A 3-dimensional tensor looks like this.

.. image:: tensor.png

This has shape () and size .


We access an element of the tensor by tensor index notation, `tensor[i]` for 1-dimension,
`tensor[i, j]` for 2-dimension, `tensor[i, j, k]` for 3-dimension, and so forth.


Typically we will use tensors just like multi-dimensional arrays, but
there are a couple properties that are worth knowing about now because
they are just a little different.

First, is that tensors make it really easy to change the order of the
dimensions. For examples to transpose the dimensions of a matrix. For
a general tensor we will refer to this operation as `permute`. Calling
permute will arbitrarily reoder the original tensor. For example, `permute(1,0)`

.. image:: tensor.png

This makes the original matrix of size (4, 3) become (3, 4). Additionally element `tensor[i, j]`
is now accessed as `tensor[j, i]`

Next, tensors make it really easy to add or remove additional
dimensions. We do this by noting that a matrix of size (4, 3) stores
exactly the same data as a matrix of size (1, 4, 3), we can see that
they are the same size.

.. image:: bigger.png

We would like to easily increase and lower the size of our tensors
without changing the data. We will do this with a `view` function
`view(1, 4, 3)`. Element `tensor[i, j]` is now `tensor[1, i, j]`.


Critically neither of these operations changes anything about the
tensor itself! Both view and permute are `tensor tricks`, operations
that modify how we look at the tensor, but not any of its
data. Another way to say this is that they do not move or copy the
data in any way, but only the external tensor wrapper.
